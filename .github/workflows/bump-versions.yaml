# Bump app and chart versions in the version.env file at the top level of the repo
# by minor major or patch as specified based off the last commit message.
# Versions in the version.env can be in form 0.1.2 or r123
# If in the form r123 the major|patch|minor is ignored for a +1 operation
# Will only update versions on a push event, if not returns versions-changed-by-ci as false

# Example commit message: update-versions app patch chart patch
name: Bump chart and/or app versions
permissions:
  contents: write
  pull-requests: write
on:
  workflow_call:
    inputs:
      bypass-dev-protections:
        description: >
          Use custom user to override branch protections when
          pushing directly to dev
        required: false
        default: false
        type: boolean
    outputs:
      versions-changed-by-ci:
        description: "If the commit message was valid and the versions will change; 'true' or 'false'"
        value: ${{ jobs.parseVersionChangeRequest.outputs.validRequest }}
    secrets:
      PUSH_CHARTS_TOKEN:
        required: false

jobs:
  #label PR as being compatible with the `update-versions` command
  labelPR:
    name: Set merge-and-release-extension-compatible label
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request'
      && (
        github.event.action == 'opened'
        || github.event.action == 'synchronize'
        || github.event.action == 'ready_for_review'
      )
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: Check if version.env already has changes
        id: changed-version-env
        if: github.event_name != 'release'
        uses: tj-actions/changed-files@467e54813892b0cf302b0bba54d233c861b97f1a
        with:
          files: 'version.env'

      - name: Add label
        # Run only if label does not yet exist and version.env has not been changed
        if: |
          steps.changed-version-env.outputs.any_changed == 'false'
          && !contains( github.event.pull_request.labels.*.name, 'merge-and-release-extension-compatible')
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: merge-and-release-extension-compatible

      - name: Remove label
        # Run only if label already exists and version.env has been changed
        if: |
          steps.changed-version-env.outputs.any_changed == 'true'
          && contains( github.event.pull_request.labels.*.name, 'merge-and-release-extension-compatible')
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: merge-and-release-extension-compatible

      - name: Output debug logs
        run: |
          echo "version_env_changed=${{ steps.changed-version-env.outputs.any_changed }}"
          echo "labels=${{ toJSON(github.event.pull_request.labels.*.name) }}"
          echo "labels_contain_mnr=${{ contains( github.event.pull_request.labels.*.name, 'merge-and-release-extension-compatible') }}"

  # Increment the APP and CHART versions based on commit message starting with update-versions 
  parseVersionChangeRequest:
    name: Parse version changes
    runs-on: ubuntu-latest
    outputs:
      requestPattern: ${{ steps.validate-commit.outputs.requestPattern }}
      validRequest: ${{ steps.validate-commit.outputs.validRequest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Validate commit message
        id: validate-commit
        run: |
          . version.env
          outputs=""
          validRequest=false
          commit=$(git log -1 --pretty=format:"%s")
          if [[ "${commit}" == *"update-versions "* ]]; then
            # Get outputs in form of chart:major/minor/patch app:major/minor/patch
            outputs=$( echo "${commit}" | sed -rn "s/update-versions (app|chart) (\w+)( (app|chart) (\w+))?/\1:\2 \4:\5/p" | sed "s/ ://" )
            # Verify that chart is specified
            chartRegex='chart:(major|minor|patch)'
            appRegex='app:(major|minor|patch)'

            # 'chart' must be defined and valid
            if [[ $outputs =~ $chartRegex ]]; then
              chartOK=true
            else
              echo "bad or missing value for 'chart'"
              chartOK=false
            fi

            # if 'app' is provided, it must be valid
            if [[ $outputs =~ $appRegex || ! $outputs =~ 'app:' ]]; then
              appOK=true
            else
              echo "bad value for 'app'"
              appOK=false
            fi

            # Can only update versions on pull request when chart is specified
            if $chartOK && $appOK && [[ $EVENTNAME == 'push' ]]; then
              validRequest=true
            fi
            echo "Using $outputs versions from commit message ${commit}"
          fi
          echo "requestPattern=${outputs}" >> $GITHUB_OUTPUT
          echo "validRequest=${validRequest}" >> $GITHUB_OUTPUT
        env:
          EVENTNAME: ${{ github.event_name }}
  changeVersions:
    name: Update versions
    runs-on: ubuntu-latest
    needs: parseVersionChangeRequest
    if: |
      (github.event_name == 'push' &&
        needs.parseVersionChangeRequest.outputs.validRequest == 'true')
    steps:
      # Checkout as github-actions for normal workflow
      - uses: actions/checkout@v3
        if: |
          !inputs.bypass-dev-protections
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      # Checkout as given token to bypass branch protections
      - uses: actions/checkout@v3
        if: |
          inputs.bypass-dev-protections
        with:
          token: ${{ secrets.PUSH_CHARTS_TOKEN }}
      - name: Get latest changes
        run: git pull
      - name: Calculate desired version changes
        id: get-new-versions
        run: |
          . version.env
          # Check both chart and app for version changes and bump accordingly 
          vers=( chart app )
          for i in "${vers[@]}"; do
            if [ "$i" = "chart" ]; then
              version=$CHARTVERSION
            else
              version=$APPVERSION
            fi
            echo "original: $version"
            rNumRegex='^r[[:digit:]]+$'
            semRegex='^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$'
            # if version starts with 'v', remove it so versions like 'v1.2.3' and '1.2.3' can be parsed the same way
            if [[ $version = v* ]]; then
              startsWithV=true
              version="${version:1}"
            else
              startsWithV=false
            fi

            # If versioning follows pattern r123 where 123 is any set of digits
            if [[ $version =~ $rNumRegex ]]; then
              echo "Version fits pattern r123 where 123 are any digits"
              # If the versioning is r123 format, ignore patch/major/minor as it can only be a +1
              echo "outputs: ${outputs}"
              if [[ "${outputs}" == *"${i}:"* ]]; then
                newVers="${version:1}"
                ((newVers+=1))
                printf -v version 'r%d' "$((newVers))"
              fi
            # If versioning follows semantic versioning pattern like 0.12.23
            elif [[ $version =~ $semRegex ]]; then
              echo "Version uses semantic versioning"
              IFS=. read -r major minor patch <<<"$version"
              if [[ "${outputs}" == *"${i}:patch"* ]]; then
                ((patch+=1))
              elif [[ "${outputs}" == *"${i}:minor"* ]]; then
                ((minor+=1))
                patch="0"
              elif [[ "${outputs}" == *"${i}:major"* ]]; then
                ((major+=1))
                patch="0"
                minor="0"
              fi
              printf -v version '%d.%d.%d' "$((major))" "$((minor))" "$((patch))"
              if $startsWithV; then
                printf -v version 'v%s' $version
              fi
            else echo "${version} did not match regex pattern for 1.2.3, v1.2.3, or r123"
            fi
            if [ "$i" = "chart" ]; then
              echo "new chart vers: ${version}"
              echo "newChartversion=${version}" >> $GITHUB_OUTPUT
            else
              echo "new app vers: ${version}"
              echo "newAppversion=${version}" >> $GITHUB_OUTPUT
            fi
          done
        env:
          outputs: ${{needs.parseVersionChangeRequest.outputs.requestPattern}}
      - name: Update Versions in version.env
        id: update-versions
        run: |
          sed -i 's/^APPVERSION=.*/APPVERSION='${APPVERSION}'/' version.env
          sed -i 's/^CHARTVERSION=.*/CHARTVERSION='${CHARTVERSION}'/' version.env
        env:
          APPVERSION: ${{ steps.get-new-versions.outputs.newAppversion }}
          CHARTVERSION: ${{ steps.get-new-versions.outputs.newChartversion }}
      - name: Push Version File Updates
        id: push-updated-versions
        if: |
          github.event_name == 'push'
        run: |
          . version.env
          if ! git diff --quiet; then
            git config --global user.name github-actions
            git config --global user.email ""
            git add -A
            git commit -m "[skip ci] Updating version.env with appversion ${APPVERSION}, chartversion ${CHARTVERSION}"
            git push
          fi
